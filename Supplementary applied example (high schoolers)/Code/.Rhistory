"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"haven",
"mice",
"gtsummary",
"tableone",
"corrr",
"Amelia")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
renv::snapshot()
here()
# set working directories
code.dir = here()
# set working directories
code.dir = here()
# if you need to go up a level in parent directory
( sim.code.dir = str_replace_all( string = here(),
pattern = "Applied example/Code",
replacement = "Simulation study/Code" ) )
# check it
setwd(sim.code.dir)
# set working directories
code.dir = here()
# if you need to go up a level in parent directory
( sim.code.dir = str_replace_all( string = here(),
pattern = "Applied example/Code",
replacement = "Simulation study/Code" ) )
# check it
setwd(sim.code.dir)
# get helper fns
setwd(code.dir)
source("helper_applied_IWN.R")
# get fns from sim study
setwd(sim.code.dir)
source("helper_IWN.R")
# dataset cannot be released in our repo per terms of use
# see READ-ME for how to easily access it yourself (free)
( private.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF (IWN)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/ICPSR_36423 2/DS0002" ) )
# check it
setwd(private.data.dir)
# dataset cannot be released in our repo per terms of use
# see READ-ME for how to easily access it yourself (free)
( private.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF (IWN)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/ICPSR_36423 2/DS0002" ) )
# check it
setwd(private.data.dir)
prepped.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF (IWN)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/Prepped data" )
# check it
setwd(prepped.data.dir)
# no sci notation
options(scipen=999)
# ~ Read in and subset (enormous) raw data ------------------------------
setwd(private.data.dir)
list.files()
here()
( private.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF \\(IWN\\)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/ICPSR_36423 2/DS0002" ) )
# check it
setwd(private.data.dir)
list.files()
prepped.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF \\(IWN\\)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/Prepped data" )
# check it
setwd(prepped.data.dir)
RM(LIST=LS())
rm(list=ls())
# get helper fns
setwd(code.dir)
# get helper fns
setwd(here())
source("helper_applied_IWN.R")
# get fns from sim study
setwd(sim.code.dir)
# get helper fns
setwd(here())
source("helper_applied_IWN.R")
# get fns from sim study
( sim.code.dir = str_replace_all( string = here(),
pattern = "Applied example/Code",
replacement = "Simulation study/Code" ) )
setwd(sim.code.dir)
source("helper_IWN.R")
# dataset cannot be released in our repo per terms of use
# see READ-ME for how to easily access it yourself (free)
prepped.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF \\(IWN\\)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/Prepped data" )
# check it
setwd(prepped.data.dir)
here()
# dataset cannot be released in our repo per terms of use
# see READ-ME for how to easily access it yourself (free)
prepped.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF \\(IWN\\)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/Prepped data" )
prepped.data.dir
# dataset cannot be released in our repo per terms of use
# see READ-ME for how to easily access it yourself (free)
prepped.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF \\(IWN\\)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/Prepped data" )
# check it
setwd(prepped.data.dir)
# dataset cannot be released in our repo per terms of use
# see READ-ME for how to easily access it yourself (free)
prepped.data.dir = str_replace_all( string = here(),
pattern = "Linked to OSF \\(IWN\\)/Applied example/Code",
replacement = "Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/Prepped data" )
# check it
setwd(prepped.data.dir)
# no sci notation
options(scipen=999)
# seed for all stochastic things below
seed = 123
# Read in data  -------------------------------------------------
setwd(prepped.data.dir)
d2 = fread("prepped_data.csv")
dim(d2)
# ~ Descriptives  -------------------------------------------------
analysis_vars = c("X3TGPAACAD", "par1_has_BA", "X1SES", "female", "public_school")
CreateTableOne(data = d2 %>% select(analysis_vars))
cor(d2 %>% select(analysis_vars), use = "pairwise.complete.obs")
# missingness in underlying data on these vars
# up to 28% missing (parent has BA)
d2 %>% select(analysis_vars) %>%
summarise_all( function(x) mean(is.na(x)))
# ~ Descriptives  -------------------------------------------------
analysis_vars = c("X3TGPAACAD", "par1_has_BA", "X1SES", "female", "public_school")
CreateTableOne(data = d2 %>% select(analysis_vars))
cor(d2 %>% select(analysis_vars), use = "pairwise.complete.obs")
# missingness in underlying data on these vars
# up to 28% missing (parent has BA)
d2 %>% select(analysis_vars) %>%
summarise_all( function(x) mean(is.na(x)))
# ~ Impose missingness  -------------------------------------------------
du = d2 %>% select(analysis_vars) %>% na.omit
dim(du)
cor(du, use = "pairwise.complete.obs")
set.seed(seed)
dm = file_match(du,
var1 = "par1_has_BA",
var2 = "X1SES" )
colMeans(dm, na.rm = TRUE)
colMeans(is.na(dm))
# ~ Make imputations and compare  -------------------------------------------------
impute_compare(.dm = dm,
.du = du,
.noms = c("par1_has_BA", "female", "public_school"),
.imp.seed = seed,
#.run.mice = FALSE,
.form.string.dm = "X3TGPAACAD ~ par1_has_BA + X1SES + female + public_school",
.coef.of.interest.dm = "public_school",
.form.string.du = "X3TGPAACAD ~ par1_has_BA + X1SES + female + public_school",
.coef.of.interest.du = "public_school" )
# this version saves the entire dataset (23,000 rows)
# PRELIMINARIES ---------------------------------------------------------------
# # This script uses renv to preserve the R environment specs (e.g., package versions.)
# library(renv)
# # run this if you want to reproduce results using the R environment we had:
# # renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"haven",
"mice",
"gtsummary",
"tableone",
"corrr",
"xlsx",
"Amelia")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
# if you need to go up a level in parent directory
( sim.code.dir = str_replace_all( string = here(),
pattern = "Applied example/Code",
replacement = "Simulation study/Code" ) )
# check it
setwd(sim.code.dir)
# get helper fns
setwd(code.dir)
source("helper_applied_IWN.R")
# get fns from sim study
setwd(sim.code.dir)
source("helper_IWN.R")
# dataset cannot be released in our repo per terms of use
# see READ-ME for how to easily access it yourself (free)
# ( private.data.dir = str_replace_all( string = here(),
#                                       pattern = "Linked to OSF \\(IWN\\)/Applied example/Code",
#                                       replacement = "Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/ICPSR_36423 2/DS0002" ) )
private.data.dir = setwd("/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/ICPSR_36423 2/DS0002")
# check it
setwd(private.data.dir); list.files()
prepped.data.dir = setwd("/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/Prepped data")
# check it
setwd(prepped.data.dir); list.files()
# no sci notation
options(scipen=999)
# READ IN AND SUBSET DATA ------------------------------
setwd(private.data.dir)
# do not load renv package before doing this
# yields errors if so
# dataset is enormous, so takes a while
load("36423-0002-Data.rda")
# READ IN AND SUBSET DATA ------------------------------
setwd(private.data.dir)
list.files()
private.data.dir = setwd("/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/ICPSR_36423 2/DS0002")
# check it
setwd(private.data.dir); list.files()
private.data.dir = "/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/ICPSR_36423 2/DS0002"
# check it
setwd(private.data.dir); list.files()
prepped.data.dir = "/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/Prepped data"
# READ IN AND SUBSET DATA ------------------------------
setwd(private.data.dir)
# do not load renv package before doing this
# yields errors if so
# dataset is enormous, so takes a while
load("36423-0002-Data.rda")
dim(da36423.0002)
# check sample size against docs: https://www.icpsr.umich.edu/web/NADAC/studies/36423/summary
expect_equal(nrow(da36423.0002), 23503)
# some vars are always NA?
any(names(da36423.0002) == "A1SINGLESEX")
table( da36423.0002$A1SINGLESEX )
# # keep only first 5,000 rows for computational tractability
# d = da36423.0002[1:5000,]
# save intermediate dataset
setwd(prepped.data.dir)
fwrite(d, "interm_prepped_data_allrows_1.csv")
# # keep only first 5,000 rows for computational tractability
# d = da36423.0002[1:5000,]
d = da36423.0002
# save intermediate dataset
setwd(prepped.data.dir)
fwrite(d, "interm_prepped_data_allrows_1.csv")
# REMOVE UNWANTED VARIABLES ------------------------------
# read in intermediate dataset
setwd(prepped.data.dir)
d = fread("interm_prepped_data_allrows_1.csv")
# recode missing values
d2 = d
d2 = d2 %>%  mutate_if( is.numeric,
list(~ case_when(. %in% c(-9, -8, -7, -5, -4, -1) ~ NA_real_, TRUE ~ .)) )
# remove vars that are always NA
d2 = d2 %>% select( -where(~ all(is.na(.)) ) )
# keep only a subset of variables
keeper_prefixes = c("S1|S3|X1|X2|X3")
# W3 variables are sampling weights; remove them too
d2 = d2 %>% select(matches(keeper_prefixes)) %>%
select( -matches("W3HS"))
# save intermediate dataset
setwd(prepped.data.dir)
fwrite(d2, "interm_prepped_data_allrows_2.csv")
# RECODE VARIABLES ------------------------------
# read in intermediate dataset
setwd(prepped.data.dir)
d2 = fread("interm_prepped_data_allrows_2.csv")
### Time-usage variables
hr_vars = stringsWith(pattern = "S1HR",
names(d2))
# recode time-usage vars
for (.var in hr_vars) {
d2[[.var]] = recode_hrs_var(varname = .var,
dat = d2)
}
d2$screen_time = d2$S1HRVIDEO + d2$S1HRTV + d2$S1HRONLINE
d2$social_time = d2$S1HRFAMILY + d2$S1HRFRIENDS
### Other variables
d2$female = dplyr::recode( d2$S1SEX,
`(1) Male` = 0,
`(2) Female` = 1)
table(d2$female, d2$S1SEX)
d2$males_better_math = dplyr::recode( d2$S1MTHCOMP,
`(1) Females are much better` = 0,
`(2) Females are somewhat better` = 0,
`(3) Females and males are the same` = 0,
`(4) Males are somewhat better` = 1,
`(5) Males are much better` = 1)
table(d2$S1MTHCOMP, d2$males_better_math)
d2$males_better_math_cont = dplyr::recode( d2$S1MTHCOMP,
`(1) Females are much better` = 1,
`(2) Females are somewhat better` = 2,
`(3) Females and males are the same` = 3,
`(4) Males are somewhat better` = 4,
`(5) Males are much better` = 5)
d2$public_school = dplyr::recode( d2$X2CONTROL,
`(1) Public` = 1,
`(2) Catholic or other private` = 0)
table(d2$X1PAR1EDU)
d2$par1_has_BA = dplyr::recode( d2$X1PAR1EDU,
`(1) Less than high school` = 0,
`(2) High school diploma or GED` = 0,
`(3) Associate's degree` = 0,
`(4) Bachelor's degree` = 1,
`(5) Master's degree` = 1,
`(7) Ph.D/M.D/Law/other high lvl prof degree` = 1)
cor(d2$X1SES, d2$par1_has_BA, use = "pairwise.complete.obs")
# save prepped dataset
setwd(prepped.data.dir)
fwrite(d2, "prepped_data_allrows.csv")
# PRELIMINARIES ---------------------------------------------------------------
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"haven",
"mice",
"gtsummary",
"tableone",
"Amelia")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# get helper fns
setwd("/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Linked to OSF (IWN)/Applied example/Code")
source("helper_applied_IWN.R")
# get fns from sim study
setwd("/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Linked to OSF (IWN)/Simulation study/Code")
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# From 2025:
# BACK TO HSLS  -------------------------------------------------
setwd("/Users/mmathur/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Not linked to OSF/Private data for applied example/NADAC High School Longitudinal Study, 2009-2013 [United States] (ICPSR 36423)/Prepped data")
d = fread("prepped_data_allrows.csv")
dim(d)
# corrs involving the analysis variables
analysis_vars = c("X2X1TXMSCR", "X3TCREDSTEM", "public_school", "female")
corrs = d %>%
select( all_of(analysis_vars) ) %>%
corrr::correlate( use = "pairwise.complete.obs" ) %>%
corrr::stretch() %>%
arrange(desc(r)) %>%
group_by(r) %>%
filter(row_number()==1)
corrs$r = round(corrs$r, 2)
corrs = corrs[ !is.na(corrs$r), ]
View(corrs)
# temporarily restrict to X3TCREDSTEM observed
d2 = d %>% filter( !is.na(X3TCREDSTEM) )
cor( is.na(d2$X2X1TXMSCR), d2$X3TCREDSTEM )
### Compare imputation with vs. without the alleged collider (X3TCREDSTEM)
# with the collider:
dm = d2 %>% select( all_of( c("X2X1TXMSCR", "X3TCREDSTEM", "public_school", "female") ) )  # intercept: 56.07837
# note: "underlying" is actually CCA
# intercept only:
impute_compare(.dm = dm,
.du = d2,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ 1",
.form.string.du = "X2X1TXMSCR ~ 1",
.coef.of.interest.dm = "(Intercept)",
.coef.of.interest.du = "(Intercept)")
dm = d2 %>% select( all_of( c("X2X1TXMSCR", "public_school", "female") ) )  # intercept: 56.58672
# note: "underlying" is actually CCA
# intercept only:
impute_compare(.dm = dm,
.du = d2,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ 1",
.form.string.du = "X2X1TXMSCR ~ 1",
.coef.of.interest.dm = "(Intercept)",
.coef.of.interest.du = "(Intercept)")
# *** GOOD EXAMPLE!
# note: "underlying" is actually CCA
# CCA: female coef 0.14
d2 = d %>% filter( !is.na(X3TCREDSTEM), !is.na(female) )
dm = d2 %>% select( all_of( c("X2X1TXMSCR", "X3TCREDSTEM", "female") ) ) # female coef: 0.50
impute_compare(.dm = dm,
.du = d2,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ female",
.form.string.du = "X2X1TXMSCR ~ female",
.coef.of.interest.dm = "female",
.coef.of.interest.du = "female")
dm = d2 %>% select( all_of( c("X2X1TXMSCR", "female") ) ) # female coef:
impute_compare(.dm = dm,
.du = d2,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ female",
.form.string.du = "X2X1TXMSCR ~ female",
.coef.of.interest.dm = "female",
.coef.of.interest.du = "female")
names(d2)
vars_to_check <- c(
"screen_time", "social_time", "female",
"males_better_math", "males_better_math_cont",
"public_school", "par1_has_BA"
)
missing_summary <- d %>%
summarise(across(all_of(vars_to_check), ~ mean(is.na(.)) * 100)) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Percent_Missing") %>%
arrange(desc(Percent_Missing)) %>%
mutate(Percent_Missing = round(Percent_Missing, 2))
missing_summary
# with collider:
dm = d2 %>% select( all_of( vars_to_check ) ) # female coef: -0.06 [-0.61, 0.49]
# with collider:
dm = d2 %>% select( all_of( c( "X2X1TXMSCR", "X3TCREDSTEM", vars_to_check ) ) # female coef: -0.06 [-0.61, 0.49]
)
# with collider:
dm = d2 %>% select( all_of( c( "X2X1TXMSCR", "X3TCREDSTEM", vars_to_check ) ) ) # female coef: -0.06 [-0.61, 0.49]
impute_compare(.dm = dm,
.du = d2,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ female",
.form.string.du = "X2X1TXMSCR ~ female",
.coef.of.interest.dm = "female",
.coef.of.interest.du = "female")
head9dm
head(dm)
cor(dm$X3TCREDSTEM, is.na(X2X1TXMSCR))
cor(dm$X3TCREDSTEM, is.na(dm$X2X1TXMSCR))
dm = d2 %>% select( all_of( c("X2X1TXMSCR", vars_to_check ) ) ) # female coef:
impute_compare(.dm = dm,
.du = d2,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ female",
.form.string.du = "X2X1TXMSCR ~ female",
.coef.of.interest.dm = "female",
.coef.of.interest.du = "female")
impute_compare(.dm = dm,
.du = d2,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ female",
.form.string.du = "X2X1TXMSCR ~ female",
.coef.of.interest.dm = "female",
.coef.of.interest.du = "female")
impute_compare(.dm = dm,
.du = d2,
.m.imp = 50,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ female",
.form.string.du = "X2X1TXMSCR ~ female",
.coef.of.interest.dm = "female",
.coef.of.interest.du = "female")
# with collider:
dm = d2 %>% select( all_of( c( "X2X1TXMSCR", "X3TCREDSTEM", vars_to_check ) ) ) # female coef:
impute_compare(.dm = dm,
.du = d2,
.m.imp = 50,
.run.amelia = FALSE,
.form.string.dm = "X2X1TXMSCR ~ female",
.form.string.du = "X2X1TXMSCR ~ female",
.coef.of.interest.dm = "female",
.coef.of.interest.du = "female")
